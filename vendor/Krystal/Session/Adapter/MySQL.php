<?php/** * This file is part of the Krystal Framework *  * Copyright (c) 2015 David Yang <daworld.ny@gmail.com> *  * For the full copyright and license information, please view * the license file that was distributed with this source code. */namespace Krystal\Session\Adapter;use PDO;/** * The table should be already created. To create run MySQL.schema.sql */final class MySQL implements SaveHandlerInterface{	/**	 * PDO instance	 * 	 * @var PDO	 */	private $pdo;	/**	 * Session table name	 * 	 * @var string	 */	private $table;	/**	 * State initialization	 * 	 * @param PDO $pdo	 * @param string $table	 * @return void	 */	public function __construct(PDO $pdo, $table)	{		$this->pdo   = $pdo;		$this->table = $table;	}		/**	 * Opens a new session internally	 * 	 * @param string $session_path	 * @param string $name	 * @return boolean	 */	public function open($session_path, $name)	{		return true;	}	/**	 * Closes the session 	 * Internally by PHP engine	 * 	 * @return boolean	 */	public function close()	{		return true;	}	/**	 * Returns session data by its ID	 * 	 * @param string $id	 * @return array|boolean Depending on success	 */	private function fetchDataById($id)	{		$query = sprintf('SELECT `data` FROM `%s` WHERE `id` = :id', $this->table);				$stmt = $this->pdo->prepare($query);		$stmt->execute(array(			':id' => $id		));				$result = $stmt->fetch();				if (isset($result['data'])) {			return $result['data'];		} else {			return false;		}	}		/**	 * Inserts data by id	 * 	 * @param string $id	 * @param string $data	 * @return boolean	 */	private function insertDataById($id, $data)	{		$query = sprintf('INSERT INTO `%s` (`id`, `data`, `touched`) VALUES (:id, :data, :touched)', $this->table);				$stmt = $this->pdo->prepare($query);		return $stmt->execute(array(			':id'		=>	$id,			':data'		=>	$data,			':touched'	=>	time(),		));	}		/**	 * Updates session data by given id	 * 	 * @param string $id	 * @param string $data	 * @return boolean Depending on success	 */	private function updateDataById($id, $data)	{		$query = sprintf('UPDATE `%s` SET `data` = :data, `touched` = :touched WHERE `id` = :id LIMIT 1', $this->table);				$stmt  = $this->pdo->prepare($query);		return $stmt->execute(array(			':data'		=>	$data,			':touched'	=>	time(),			':id'		=>	$id,		));	}		/**	 * Writes data to a session	 * 	 * @param string $session_id	 * @param array $data	 * @return boolean	 */	public function write($session_id, $session_data)	{		if ($this->fetchDataById($session_id) !== false) {			$this->updateDataById($session_id, $session_data);		} else {			$this->insertDataById($session_id, $session_data);		}				return true;	}	/**	 * Reads data from session	 * 	 * @param string $session_id (used internally by PHP engine)	 * @throws PDOException	 * @return string (Always! or PHP crashes)	 */	public function read($session_id)	{		$data =& $this->fetchDataById($session_id);				if ($data !== false) {			return $data;		} else {			return '';		}	}	/**	 * Deletes data from a session	 * 	 * @param string $id Session id	 * @throws PDOException	 * @return boolean true always	 */	public function destroy($id)	{		$query = sprintf('DELETE FROM `%s` WHERE `id` = :id', $this->table);				$stmt = $this->pdo->prepare($query);		return $stmt->execute(array(			':id' => $id		));	}	/**	 * Garbage collection	 * 	 * @param integer $maxlifetime	 * @return boolean Depending on success	 */	public function gc($maxlifetime)	{		$query = sprintf('DELETE FROM `%s` WHERE touched + %s < %s', $this->table, $maxlifetime, time());				$this->pdo->exec($query);		return true;	}}