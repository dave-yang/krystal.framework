<?php/** * This file is part of the Krystal Framework *  * Copyright (c) 2015 David Yang <daworld.ny@gmail.com> *  * For the full copyright and license information, please view * the license file that was distributed with this source code. */namespace Krystal\Session;use Krystal\Session\ManagerInterface;use Krystal\Session\SaveHandlerInterface;use Krystal\Http\PersistentStorageInterface;use Krystal\Http\CookieBagInterface;use RuntimeException;final class SessionBag implements SessionBagInterface, PersistentStorageInterface{	/**	 * Local session's data	 * 	 * @var array	 */	private $session = array();	/**	 * Cookie bag which is basically used to remove session cookies	 * 	 * @var \Krystal\Http\CookieBagInterface	 */	private $cookieBag;	/**	 * State initialization	 * 	 * @param \Krystal\Http\CookieBagInterface $cookieBag	 * @param \Krystal\SessionSaveHandlerInterface $adapter Optional save handler	 * @return void	 */	public function __construct(CookieBagInterface $cookieBag, SaveHandlerInterface $adapter = null)	{		$this->cookieBag = $cookieBag;		if (!is_null($adapter)) {			$this->initAdapter($adapter);		}	}	/**	 * Writes the data and closes the session	 * 	 * @return void	 */	public function __destruct()	{		if ($this->isStarted()) {			session_write_close();		}	}	/**	 * Initializes the session storage adapter	 * 	 * @param \Krystal\SessionSaveHandlerInterface $adapter	 * @return boolean	 */	private function initAdapter(SaveHandlerInterface $adapter)	{		return session_set_save_handler(array($adapter, 'open'), 										array($adapter, 'close'), 										array($adapter, 'read'), 										array($adapter, 'write'), 										array($adapter, 'destroy'), 										array($adapter, 'gc'));	}	/**	 * Removes all data from session	 * 	 * @return boolean	 */	public function removeAll()	{		$this->session = array();	}	/**	 * Returns all session data	 * 	 * @return array	 */	public function getAll()	{		return $this->session;	}	/**	 * Checks whether session is empty	 * 	 * @return boolean	 */	public function isEmpty()	{		return empty($this->session);	}	/**	 * Tells whether session is valid	 * 	 * @return boolean	 */	public function isValid()	{		// @TODO Re-factor this		return $this->session['HTTP_USER_AGENT'] === md5($_SERVER['HTTP_USER_AGENT']) 			&& $this->session['REMOTE_ADDR'] === md5($_SERVER['REMOTE_ADDR']);	}	/**	 * Starts a new session or continues existing one	 * 	 * @param array $options Cookie options	 * @return boolean	 */	public function start(array $options = array())	{		if ($this->isStarted() === false) {			// Cookie parameters must be defined before session_start()!			if (!empty($options)) {				$this->setCookieParams($options);			}			if (!session_start()) {				return false;			}		}		// Reference is important! Because we are going to deal with $_SESSION itself		// not with its copy, or this simply won't work the way we expect		$this->session =& $_SESSION;		// @todo improve this, get rid of global $_SERVER		$this->session['HTTP_USER_AGENT'] = md5($_SERVER['HTTP_USER_AGENT']);		$this->session['REMOTE_ADDR'] = md5($_SERVER['REMOTE_ADDR']);		return true;	}	/**	 * Regenerates session's id	 * 	 * @return boolean	 */	public function regenerate()	{		return session_regenerate_id(true);	}	/**	 * Defines session's name	 * 	 * @param string $name	 * @return void	 */	public function setName($name)	{		return session_name($name);	}	/**	 * Returns session's name	 * 	 * @return string	 */	public function getName()	{		return session_name();	}	/**	 * Checks whether session is started	 * 	 * @return boolean	 */	public function isStarted()	{		return $this->getId() !== '';	}	/**	 * Returns current session's id	 * 	 * @return string	 */	public function getId()	{		return session_id();	}	/**	 * Sets session id	 * 	 * @param string $id	 * @return void	 */	public function setId($id)	{		return session_id($id);	}	/**	 * Stores data in session's storage	 * 	 * @param string $key	 * @param mixed $value	 * @return void	 */	public function set($key, $value)	{		$this->session[$key] = $value;	}	/**	 * Determines whether session has a key	 * 	 * @param string $key	 * @return boolean	 */	public function has($key)	{		return array_key_exists($key, $this->session);	}	/**	 * Reads data from a session	 * 	 * @param string $key	 * @param mixed $default Default value to be returned if request key doesn't exist	 * @return mixed	 */	public function get($key, $default = false)	{		if ($this->has($key) !== false) {			return $this->session[$key];		} else {			return $default;		}	}	/**	 * Removes a key from the storage	 * 	 * @throws \RuntimeException if attempted to remove non-existing key	 * @param string $key	 * @return void	 */	public function remove($key)	{		if ($this->has($key)) {			unset($this->session[$key]);		} else {			throw new RuntimeException(sprintf(				'Attempted to remove non-existing key "%s"', $key			));		}	}	/**	 * Free all session variables	 * 	 * @return void	 */	public function free()	{		return session_unset();	}	/**	 * Returns true	 * if sessions are enabled, and one exists.  	 * 	 * @return boolean	 */	public function isActive()	{		return $this->getId() !== '' && !empty($this->session);	}	/**	 * Checks if sessions are disabled	 * 	 * @return boolean	 */	public function isDisabled()	{		return $this->getId() === '' && empty($this->session);	}	/**	 * Checks if sessions are enabled, but none exists 	 * 	 * @return boolean	 */	public function isNone()	{		return $this->getId() !== '' && empty($this->session);	}	/**	 * Returns cookie storage parameters for the session	 * 	 * @return array	 */	public function getCookieParams()	{		return session_get_cookie_params();	}	/**	 * Returns cookie parameters for the session	 * 	 * @param array $params	 * @return array	 */	public function setCookieParams(array $params)	{		return session_set_cookie_params($params);	}	/**	 * Encodes session data	 * 	 * @return string	 */	public function encode()	{		return session_encode();	}	/**	 * Serializes the session array	 * 	 * @return string	 */	public function decode()	{		return session_decode();	}	/**	 * Destroys the session	 * 	 * @return boolean	 */	public function destroy()	{		// Erase the id on the client side		if ($this->cookieBag->has($this->getName())) {			$this->cookieBag->remove($this->getName());		}		// Erase on the server side		return session_destroy();	}}