<?php/** * This file is part of the Krystal Framework *  * Copyright (c) 2015 David Yang <daworld.ny@gmail.com> *  * For the full copyright and license information, please view * the license file that was distributed with this source code. */namespace Krystal\Validate;use Krystal\Validate\Input\InputValidator;use Krystal\Validate\File\FileValidator;use Krystal\Validate\Renderer\RendererInterface;final class ValidatorFactory{	/**	 * Translator instance	 * 	 * @var Translator	 */	private $translator;	/**	 * Defines renderer for error messages	 * 	 * @var string	 */	private $renderer;	/**	 * State initialization	 * 	 * @param Translator $translator	 * @param \Krystal\Validate\Renderer\RendererInterface $renderer	 * @return void	 */	public function __construct($translator, RendererInterface $renderer)	{		$this->translator = $translator;		$this->setRenderer($renderer);	}	/**	 * Sets or overrides default renderer	 * 	 * @param \Krystal\Validate\Renderer\RendererInterface $renderer	 * @return void	 */	public function setRenderer(RendererInterface $renderer)	{		$this->renderer = $renderer;	}	/**	 * Builds parser instance	 * 	 * @param array $patterns	 * @return \Krystal\Validate\ValidatorChain	 */	public function build(array $validators)	{		$chain = array();				foreach ($validators as $validator => $options) {			switch (strtolower($validator)) {				case 'input':					$chain[] = InputValidator::factory($options['source'], $options['definition'], $this->translator);				break;								case 'file':					$chain[] = FileValidator::factory($options['source'], $options['definition'], $this->translator);				break;			}		}				return new ValidatorChain($chain, $this->renderer);	}}