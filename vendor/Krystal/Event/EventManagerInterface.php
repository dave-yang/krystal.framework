<?php/** * This file is part of the Krystal Framework *  * Copyright (c) 2015 David Yang <daworld.ny@gmail.com> *  * For the full copyright and license information, please view * the license file that was distributed with this source code. */namespace Krystal\Event;interface EventManagerInterface{	/**	 * Attaches a new event	 * 	 * @param string $eventName	 * @param callable $listener	 * @param array $arguments Arguments to be passed to the listener	 * @throws \InvalidArgumentException If either listener isn't callable or event name's isn't a string	 * @return \Krystal\Event\EventManager	 */	public function attach($eventName, $listener, array $arguments = array());	/**	 * Detaches an event	 * 	 * @param string $eventName	 * @throws \RuntimeException If attempted to detach non-existing event	 * @return void	 */	public function detach($eventName);	/**	 * Detaches all attached events with their associated listeners	 * 	 * @return void	 */	public function detachAll();	/**	 * Triggers an event with array of provided arguments	 * 	 * @param string $eventName	 * @param array $arguments Additional arguments to be passed to the listener 	 * @throws \RuntimeException If attempted to trigger undefined event	 * @return mixed	 */	public function vtrigger($eventName, $arguments = array());	/**	 * Triggers an event	 * 	 * @param string $eventName	 * @param mixed ...	 * @return mixed	 */	public function trigger();	/**	 * Checks whether event has been defined before	 * 	 * @param string $eventName	 * @return boolean	 */	public function has($eventName);	/**	 * Counts amount of defined events	 * 	 * @return integer	 */	public function countAll();}